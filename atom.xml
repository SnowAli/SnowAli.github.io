<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnowAli</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-20T09:39:12.072Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>SnowAli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node应用运行在服务器上</title>
    <link href="http://example.com/2020/12/20/node%E5%BA%94%E7%94%A8%E8%BF%90%E8%A1%8C%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
    <id>http://example.com/2020/12/20/node%E5%BA%94%E7%94%A8%E8%BF%90%E8%A1%8C%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</id>
    <published>2020-12-20T09:23:17.000Z</published>
    <updated>2020-12-20T09:39:12.072Z</updated>
    
    <content type="html"><![CDATA[<p>想要node应用持续运行在Linux服务器上，不被杀掉进程，要使用nohub node app.js命令</p><p>每次修改代码，重新打包部署之后，要先cd到当前node应用目录，使用lsof -i:3000（3000是应用运行的端口）<br>找到PID</p><p>使用kill命令，将该PID杀掉，之后，再重新使用nohub node app.js</p><p><img src="https://raw.githubusercontent.com/SnowAli/FigureBed/main/img/20201220172718.png"></p><p>参考链接：<a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">https://www.runoob.com/w3cnote/linux-check-port-usage.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;想要node应用持续运行在Linux服务器上，不被杀掉进程，要使用nohub node app.js命令&lt;/p&gt;
&lt;p&gt;每次修改代码，重新打包部署之后，要先cd到当前node应用目录，使用lsof -i:3000（3000是应用运行的端口）&lt;br&gt;找到PID&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
    <category term="Node" scheme="http://example.com/tags/Node/"/>
    
    <category term="Node应用部署" scheme="http://example.com/tags/Node%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>element组件的dialog中的表单数据更改时无法做到实时渲染</title>
    <link href="http://example.com/2020/12/07/element%E7%BB%84%E4%BB%B6%E7%9A%84dialog%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%94%B9%E6%97%B6%E6%97%A0%E6%B3%95%E5%81%9A%E5%88%B0%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"/>
    <id>http://example.com/2020/12/07/element%E7%BB%84%E4%BB%B6%E7%9A%84dialog%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%94%B9%E6%97%B6%E6%97%A0%E6%B3%95%E5%81%9A%E5%88%B0%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/</id>
    <published>2020-12-07T07:54:26.000Z</published>
    <updated>2020-12-13T12:07:52.285Z</updated>
    
    
    
    
    <category term="组件库" scheme="http://example.com/categories/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
    
    <category term="Web前端" scheme="http://example.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Element-ui" scheme="http://example.com/tags/Element-ui/"/>
    
  </entry>
  
  <entry>
    <title>position：stick的使用</title>
    <link href="http://example.com/2020/11/23/position%EF%BC%9Asticky%E7%9A%84%E5%9D%91/"/>
    <id>http://example.com/2020/11/23/position%EF%BC%9Asticky%E7%9A%84%E5%9D%91/</id>
    <published>2020-11-23T07:54:26.000Z</published>
    <updated>2020-11-23T11:07:52.688Z</updated>
    
    <content type="html"><![CDATA[<p>看这篇文章吧：<br><a href="https://segmentfault.com/a/1190000007183209">https://segmentfault.com/a/1190000007183209</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看这篇文章吧：&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000007183209&quot;&gt;https://segmentfault.com/a/1190000007183209&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CSS" scheme="http://example.com/categories/CSS/"/>
    
    
    <category term="Web前端" scheme="http://example.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用vue ui对项目打包时 “No module factory available for dependency type：CssDependency”</title>
    <link href="http://example.com/2020/11/14/vue%20ui%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99/"/>
    <id>http://example.com/2020/11/14/vue%20ui%E6%89%93%E5%8C%85%E6%8A%A5%E9%94%99/</id>
    <published>2020-11-14T07:54:26.000Z</published>
    <updated>2020-11-14T09:07:30.901Z</updated>
    
    <content type="html"><![CDATA[<p>使用vue-cli提供的可视化界面进行项目打包时，出现了这个错误:</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/SnowAli/FigureBed/main/img/20201114162926.png"></p><p>但直接在终端执行 <strong>npm run build</strong> 命令却是没问题的</p><p><img src="https://raw.githubusercontent.com/SnowAli/FigureBed/main/img/20201114163406.png"></p><p>在vue.js.config文件中，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  css: &#123;</span><br><span class="line">    extract: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就可以打包了</p><p>见文档：<a href="https://cli.vuejs.org/zh/config/#css-extract">https://cli.vuejs.org/zh/config/#css-extract</a><br>具体原因尚未清楚</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用vue-cli提供的可视化界面进行项目打包时，出现了这个错误:&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="Vue-Cli Web前端" scheme="http://example.com/tags/Vue-Cli-Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Babel转码器</title>
    <link href="http://example.com/2020/10/28/Babel%E8%BD%AC%E7%A0%81/"/>
    <id>http://example.com/2020/10/28/Babel%E8%BD%AC%E7%A0%81/</id>
    <published>2020-10-28T15:05:52.866Z</published>
    <updated>2020-10-28T15:08:27.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-6-Babel转码器"><a href="#1-6-Babel转码器" class="headerlink" title="1.6 Babel转码器"></a>1.6 Babel转码器</h1><p><strong>Babel(babeljs.io/)</strong> 是一个广泛使用的ES6转码器，可以将ES6代码转化为ES5代码，从而在浏览器或其他环境执行。</p><a id="more"></a><h2 id="1-6-1-配置文件-babelrc"><a href="#1-6-1-配置文件-babelrc" class="headerlink" title="1.6.1 配置文件 .babelrc"></a>1.6.1 配置文件 .babelrc</h2><p>存放在根目录下的配置文件，用来设置转码规则和插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        &quot;latest&quot;,</span><br><span class="line">        &quot;react&quot;,</span><br><span class="line">        &quot;stage-2&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想使用Babel工具和模块，必须先写好.babelrc。</p><h2 id="1-6-2-命令行转码-babel-cli"><a href="#1-6-2-命令行转码-babel-cli" class="headerlink" title="1.6.2 命令行转码 babel-cli"></a>1.6.2 命令行转码 babel-cli</h2><h2 id="1-6-3-babel-node"><a href="#1-6-3-babel-node" class="headerlink" title="1.6.3 babel-node"></a>1.6.3 babel-node</h2><p>babel-cli工具自带的一个babel-node命令，提供一个支持ES6的REPL环境，可以直接运行ES6代码。<br>babel-node命令可以直接运行ES6脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装babel-cli</span><br><span class="line">npm install --save-dev babel-cli</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 改写package.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;script-name&quot;: &quot;babel-node script.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，使用babel-node替代node,这样script.js本身就不需进任何转码处理了。</p><h2 id="1-6-4-babel-register"><a href="#1-6-4-babel-register" class="headerlink" title="1.6.4 babel-register"></a>1.6.4 babel-register</h2><p>babel-register改写了require命令，为它加上了一个钩子，此后每当用require加载.js、.jsx、.es、 和.es6文件时，就会先用Babel进行转码。</p><p>安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-register</span><br></pre></td></tr></table></figure><p>使用时，必须首先加载babel-register</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;babel-register&quot;);</span><br><span class="line">require(&quot;index.js&quot;)</span><br></pre></td></tr></table></figure><h2 id="1-6-5-babel-core"><a href="#1-6-5-babel-core" class="headerlink" title="1.6.5 babel-core"></a>1.6.5 babel-core</h2><p>调用Babel的API对某些代码进行转码。</p><p>安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core -save</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var babel &#x3D; require(&#39;babel-core&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 字符串转码</span><br><span class="line">babel.transform(&#39;core()&#39;, options);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &#123; code, map, ast&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文件转码（异步）</span><br><span class="line">babel.transformFile(&#39;filename.js&#39;, options, function(err, result) &#123;</span><br><span class="line">    result; &#x2F;&#x2F; &#x3D;&gt; &#123;code, map, ast&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 文件转码（同步）</span><br><span class="line">babel.transformFileSync(&#39;filename.js&#39;, options);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &#123;code, map, ast&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Babel AST转码</span><br><span class="line">babel.transformFormAst(ast, code, options);</span><br><span class="line">&#x2F;&#x2F; &#x3D;&gt; &#123;code, map, ast&#125;</span><br></pre></td></tr></table></figure><p>options是一个配置对象。<br>下面是一个详细的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var es6Code &#x3D; &#39;let x &#x3D; n &#x3D;&gt; n + 1&#39;;</span><br><span class="line">var es5Code &#x3D; require(&#39;babel-core&#39;).transform(es6Code, &#123;</span><br><span class="line">    presets: [&#39;latest&#39;]</span><br><span class="line">&#125;).code;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 转码后：</span><br><span class="line">&#x2F;&#x2F; &quot;use strict&quot;; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  var x &#x3D; function x(n) &#123;</span><br><span class="line">&#x2F;&#x2F;  return n + 1;</span><br><span class="line">&#x2F;&#x2F;  &#125;;</span><br></pre></td></tr></table></figure><h2 id="1-6-6-babel-polyfill"><a href="#1-6-6-babel-polyfill" class="headerlink" title="1.6.6 babel-polyfill"></a>1.6.6 babel-polyfill</h2><p>Babel默认只转化新的js句法（syntax), 而不转化新的API, 如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（如Object.assign）都不会转码。<br>如果想让这些对象或方法（API）运行，必须使用babel-polyfill为当前环境提供一个垫片。<br>安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure><p>然后，在脚本头部加入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#39;babel-polyfill&#39;</span><br><span class="line">&#x2F;&#x2F; 或者</span><br><span class="line">require(&#39;bebel-polyfill&#39;)</span><br></pre></td></tr></table></figure><p>Babel默认不转码的API很多，详细查看文档。</p><h2 id="1-6-7-浏览器环境"><a href="#1-6-7-浏览器环境" class="headerlink" title="1.6.7 浏览器环境"></a>1.6.7 浏览器环境</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-6-Babel转码器&quot;&gt;&lt;a href=&quot;#1-6-Babel转码器&quot; class=&quot;headerlink&quot; title=&quot;1.6 Babel转码器&quot;&gt;&lt;/a&gt;1.6 Babel转码器&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Babel(babeljs.io/)&lt;/strong&gt; 是一个广泛使用的ES6转码器，可以将ES6代码转化为ES5代码，从而在浏览器或其他环境执行。&lt;/p&gt;</summary>
    
    
    
    <category term="ES6" scheme="http://example.com/categories/ES6/"/>
    
    
    <category term="ES6 Web前端" scheme="http://example.com/tags/ES6-Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Node.js路由</title>
    <link href="http://example.com/2020/10/11/node.js%E8%B7%AF%E7%94%B1/"/>
    <id>http://example.com/2020/10/11/node.js%E8%B7%AF%E7%94%B1/</id>
    <published>2020-10-11T07:54:26.000Z</published>
    <updated>2020-10-22T08:24:32.464Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-js路由"><a href="#Node-js路由" class="headerlink" title="Node.js路由"></a>Node.js路由</h3><p>路由: Web服务器根据用户输入的不同url返回不同的页面。</p><a id="more"></a><p>例如登录页面login和注册页面register</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#默认端口都为80</span><br><span class="line">http:&#x2F;&#x2F;localhost:80&#x2F;login</span><br><span class="line">http:&#x2F;&#x2F;localhost:80&#x2F;register</span><br></pre></td></tr></table></figure><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><h5 id="建立所需要的文件-index-js文件作为入口文件-router-js实现路由响应-server-js用来处理请求-file文件夹下就建立几个不同的页面-展示路由跳转"><a href="#建立所需要的文件-index-js文件作为入口文件-router-js实现路由响应-server-js用来处理请求-file文件夹下就建立几个不同的页面-展示路由跳转" class="headerlink" title="建立所需要的文件, index.js文件作为入口文件, router.js实现路由响应, server.js用来处理请求. file文件夹下就建立几个不同的页面, 展示路由跳转."></a>建立所需要的文件, index.js文件作为入口文件, router.js实现路由响应, server.js用来处理请求. file文件夹下就建立几个不同的页面, 展示路由跳转.</h5><p><img src="https://raw.githubusercontent.com/SnowAli/FigureBed/main/img/node-router-demo-files.png"></p><h5 id="创建一个http服务器，用于监听用户输入的request参数-获取request-url"><a href="#创建一个http服务器，用于监听用户输入的request参数-获取request-url" class="headerlink" title="创建一个http服务器，用于监听用户输入的request参数, 获取request.url"></a>创建一个http服务器，用于监听用户输入的request参数, 获取request.url</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; server.js</span><br><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">http.createServer(onRequest).listen(&#39;8888&#39;);</span><br><span class="line"></span><br><span class="line">function onRequest(req, res) &#123; &#x2F;&#x2F; onRequest处理用户请求</span><br><span class="line">      console.log(req.url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解析url，得到具体的请求页面，也就是路由入口"><a href="#解析url，得到具体的请求页面，也就是路由入口" class="headerlink" title="解析url，得到具体的请求页面，也就是路由入口"></a>解析url，得到具体的请求页面，也就是路由入口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; server.js</span><br><span class="line">const url &#x3D; require(&quot;url&quot;);</span><br><span class="line"></span><br><span class="line">function onRequest(req, res) &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line"></span><br><span class="line">    let myUrl &#x3D; url.parse(req.url);</span><br><span class="line">    console.log(myUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="根据url渲染不同页面"><a href="#根据url渲染不同页面" class="headerlink" title="根据url渲染不同页面"></a>根据url渲染不同页面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line">const fs &#x3D; require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">let Response &#x3D; function(res, filePath) &#123;</span><br><span class="line">  fs.readFile(filePath, (err, data) &#x3D;&gt; &#123;</span><br><span class="line">      if(err) &#123;</span><br><span class="line">          res.writeHead(404, &#123;</span><br><span class="line">              &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">          &#125;);</span><br><span class="line">          res.end(&quot;error&quot;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          res.writeHead(200, &#123;</span><br><span class="line">              &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">          &#125;);</span><br><span class="line">          res.end(data);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let router &#x3D; function(req, res) &#123;</span><br><span class="line">  if(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页</span><br><span class="line">      index.index(res);</span><br><span class="line">  &#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123; &#x2F;&#x2F; 古诗页面</span><br><span class="line">      Response(res, poem);</span><br><span class="line">  &#125; else &#123;  &#x2F;&#x2F; 不存在的页面</span><br><span class="line">      Response(res, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="以上几步就能做一个简单的node路由demo了-下面贴上完整的代码"><a href="#以上几步就能做一个简单的node路由demo了-下面贴上完整的代码" class="headerlink" title="以上几步就能做一个简单的node路由demo了, 下面贴上完整的代码:"></a>以上几步就能做一个简单的node路由demo了, 下面贴上完整的代码:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 入口文件</span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">var server &#x3D; require(&quot;.&#x2F;server&quot;);</span><br><span class="line"></span><br><span class="line">server.start();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; router.js</span><br><span class="line">&#x2F;&#x2F; 需响应的文件路由</span><br><span class="line"></span><br><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入文件系统模块</span><br><span class="line">&#x2F;&#x2F; 所有的文件系统操作都具有同步的、回调的、以及基于 promise 的形式。</span><br><span class="line">const fs &#x3D; require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">const index &#x3D; require(&quot;.&#x2F;file&#x2F;index&quot;); &#x2F;&#x2F; 主页路由模块</span><br><span class="line">const error &#x3D; &quot;.&#x2F;file&#x2F;error404.html&quot;; &#x2F;&#x2F; 错误处理路由</span><br><span class="line">const poem &#x3D; &quot;.&#x2F;file&#x2F;poem.html&quot;;       &#x2F;&#x2F; 古诗路由</span><br><span class="line"></span><br><span class="line">let Response &#x3D; function(res, filePath) &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) &#x3D;&gt; &#123;</span><br><span class="line">        if(err) &#123;</span><br><span class="line">            res.writeHead(404, &#123;</span><br><span class="line">                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(&quot;error&quot;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.writeHead(200, &#123;</span><br><span class="line">                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let router &#x3D; function(req, res) &#123;</span><br><span class="line">    if(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页</span><br><span class="line">        index.index(res);</span><br><span class="line">    &#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123;</span><br><span class="line">        Response(res, poem);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Response(res, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.router &#x3D; router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; server.js</span><br><span class="line">&#x2F;&#x2F; 服务端的start函数, 用于开启一个web服务器</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入http模块，使用HTTP服务器和客户端</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Node中的HTTP API是非常底层的，</span><br><span class="line">&#x2F;&#x2F; 仅进行流处理和消息解析。它将消息解析为消息头和消息体，但不会解析具体的消息头或消息体</span><br><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入url模块，用于处理与解析 URL。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; URL字符串是结构化的字符串，包含多个含义不同的组成部分。解析后返回的是URL对象</span><br><span class="line">&#x2F;&#x2F; url 模块提供了两套 API 来处理 URL：一个是旧版本传统的 API，一个是实现了 WHATWG标准的新 API。</span><br><span class="line">const url &#x3D; require(&quot;url&quot;);</span><br><span class="line"></span><br><span class="line">const router &#x3D; require(&#39;.&#x2F;router&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function start() &#123;</span><br><span class="line">    function onRequest(req, res) &#123;</span><br><span class="line">        if(req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;favicon.ico&#39;) &#123; </span><br><span class="line">            &#x2F;&#x2F; 浏览器默认会请求网站根目录的favicon.ico图标，如果网站根目录没有会产生 404。出于优化的考虑，要么就有这个图标，要么就禁止产生这个请求。</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(&#39;End of line&#39;);</span><br><span class="line">        console.log(req.url);</span><br><span class="line"></span><br><span class="line">        let myUrl &#x3D; url.parse(req.url);</span><br><span class="line">        console.log(myUrl);</span><br><span class="line"></span><br><span class="line">        router.router(req, res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(&#39;8888&#39;)</span><br><span class="line">    console.log(&quot;Server is running at &quot; + &quot;http:&#x2F;&#x2F;localhost:8888&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start &#x3D; start;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Node-js路由&quot;&gt;&lt;a href=&quot;#Node-js路由&quot; class=&quot;headerlink&quot; title=&quot;Node.js路由&quot;&gt;&lt;/a&gt;Node.js路由&lt;/h3&gt;&lt;p&gt;路由: Web服务器根据用户输入的不同url返回不同的页面。&lt;/p&gt;</summary>
    
    
    
    <category term="Node" scheme="http://example.com/categories/Node/"/>
    
    
    <category term="Node" scheme="http://example.com/tags/Node/"/>
    
    <category term="Web前端" scheme="http://example.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
