<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Node.js路由</title>
    <url>/2020/10/11/node.js%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="Node-js路由"><a href="#Node-js路由" class="headerlink" title="Node.js路由"></a>Node.js路由</h3><p>路由: Web服务器根据用户输入的不同url返回不同的页面。</p>
<a id="more"></a>
<p>例如登录页面login和注册页面register</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#默认端口都为80</span><br><span class="line">http:&#x2F;&#x2F;localhost:80&#x2F;login</span><br><span class="line">http:&#x2F;&#x2F;localhost:80&#x2F;register</span><br></pre></td></tr></table></figure>
<h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><h5 id="建立所需要的文件-index-js文件作为入口文件-router-js实现路由响应-server-js用来处理请求-file文件夹下就建立几个不同的页面-展示路由跳转"><a href="#建立所需要的文件-index-js文件作为入口文件-router-js实现路由响应-server-js用来处理请求-file文件夹下就建立几个不同的页面-展示路由跳转" class="headerlink" title="建立所需要的文件, index.js文件作为入口文件, router.js实现路由响应, server.js用来处理请求. file文件夹下就建立几个不同的页面, 展示路由跳转."></a>建立所需要的文件, index.js文件作为入口文件, router.js实现路由响应, server.js用来处理请求. file文件夹下就建立几个不同的页面, 展示路由跳转.</h5><p><img src="https://raw.githubusercontent.com/SnowAli/FigureBed/main/img/node-router-demo-files.png"></p>
<h5 id="创建一个http服务器，用于监听用户输入的request参数-获取request-url"><a href="#创建一个http服务器，用于监听用户输入的request参数-获取request-url" class="headerlink" title="创建一个http服务器，用于监听用户输入的request参数, 获取request.url"></a>创建一个http服务器，用于监听用户输入的request参数, 获取request.url</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; server.js</span><br><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">http.createServer(onRequest).listen(&#39;8888&#39;);</span><br><span class="line"></span><br><span class="line">function onRequest(req, res) &#123; &#x2F;&#x2F; onRequest处理用户请求</span><br><span class="line">      console.log(req.url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="解析url，得到具体的请求页面，也就是路由入口"><a href="#解析url，得到具体的请求页面，也就是路由入口" class="headerlink" title="解析url，得到具体的请求页面，也就是路由入口"></a>解析url，得到具体的请求页面，也就是路由入口</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; server.js</span><br><span class="line">const url &#x3D; require(&quot;url&quot;);</span><br><span class="line"></span><br><span class="line">function onRequest(req, res) &#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line"></span><br><span class="line">    let myUrl &#x3D; url.parse(req.url);</span><br><span class="line">    console.log(myUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="根据url渲染不同页面"><a href="#根据url渲染不同页面" class="headerlink" title="根据url渲染不同页面"></a>根据url渲染不同页面</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line">const fs &#x3D; require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">let Response &#x3D; function(res, filePath) &#123;</span><br><span class="line">  fs.readFile(filePath, (err, data) &#x3D;&gt; &#123;</span><br><span class="line">      if(err) &#123;</span><br><span class="line">          res.writeHead(404, &#123;</span><br><span class="line">              &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">          &#125;);</span><br><span class="line">          res.end(&quot;error&quot;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          res.writeHead(200, &#123;</span><br><span class="line">              &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">          &#125;);</span><br><span class="line">          res.end(data);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let router &#x3D; function(req, res) &#123;</span><br><span class="line">  if(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页</span><br><span class="line">      index.index(res);</span><br><span class="line">  &#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123; &#x2F;&#x2F; 古诗页面</span><br><span class="line">      Response(res, poem);</span><br><span class="line">  &#125; else &#123;  &#x2F;&#x2F; 不存在的页面</span><br><span class="line">      Response(res, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="以上几步就能做一个简单的node路由demo了-下面贴上完整的代码"><a href="#以上几步就能做一个简单的node路由demo了-下面贴上完整的代码" class="headerlink" title="以上几步就能做一个简单的node路由demo了, 下面贴上完整的代码:"></a>以上几步就能做一个简单的node路由demo了, 下面贴上完整的代码:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 入口文件</span><br><span class="line">&#x2F;&#x2F; index.js</span><br><span class="line">var server &#x3D; require(&quot;.&#x2F;server&quot;);</span><br><span class="line"></span><br><span class="line">server.start();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; router.js</span><br><span class="line">&#x2F;&#x2F; 需响应的文件路由</span><br><span class="line"></span><br><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入文件系统模块</span><br><span class="line">&#x2F;&#x2F; 所有的文件系统操作都具有同步的、回调的、以及基于 promise 的形式。</span><br><span class="line">const fs &#x3D; require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">const index &#x3D; require(&quot;.&#x2F;file&#x2F;index&quot;); &#x2F;&#x2F; 主页路由模块</span><br><span class="line">const error &#x3D; &quot;.&#x2F;file&#x2F;error404.html&quot;; &#x2F;&#x2F; 错误处理路由</span><br><span class="line">const poem &#x3D; &quot;.&#x2F;file&#x2F;poem.html&quot;;       &#x2F;&#x2F; 古诗路由</span><br><span class="line"></span><br><span class="line">let Response &#x3D; function(res, filePath) &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) &#x3D;&gt; &#123;</span><br><span class="line">        if(err) &#123;</span><br><span class="line">            res.writeHead(404, &#123;</span><br><span class="line">                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(&quot;error&quot;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.writeHead(200, &#123;</span><br><span class="line">                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.end(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let router &#x3D; function(req, res) &#123;</span><br><span class="line">    if(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页</span><br><span class="line">        index.index(res);</span><br><span class="line">    &#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123;</span><br><span class="line">        Response(res, poem);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Response(res, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.router &#x3D; router;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; server.js</span><br><span class="line">&#x2F;&#x2F; 服务端的start函数, 用于开启一个web服务器</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入http模块，使用HTTP服务器和客户端</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Node中的HTTP API是非常底层的，</span><br><span class="line">&#x2F;&#x2F; 仅进行流处理和消息解析。它将消息解析为消息头和消息体，但不会解析具体的消息头或消息体</span><br><span class="line">const http &#x3D; require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入url模块，用于处理与解析 URL。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; URL字符串是结构化的字符串，包含多个含义不同的组成部分。解析后返回的是URL对象</span><br><span class="line">&#x2F;&#x2F; url 模块提供了两套 API 来处理 URL：一个是旧版本传统的 API，一个是实现了 WHATWG标准的新 API。</span><br><span class="line">const url &#x3D; require(&quot;url&quot;);</span><br><span class="line"></span><br><span class="line">const router &#x3D; require(&#39;.&#x2F;router&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function start() &#123;</span><br><span class="line">    function onRequest(req, res) &#123;</span><br><span class="line">        if(req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;favicon.ico&#39;) &#123; </span><br><span class="line">            &#x2F;&#x2F; 浏览器默认会请求网站根目录的favicon.ico图标，如果网站根目录没有会产生 404。出于优化的考虑，要么就有这个图标，要么就禁止产生这个请求。</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(&#39;End of line&#39;);</span><br><span class="line">        console.log(req.url);</span><br><span class="line"></span><br><span class="line">        let myUrl &#x3D; url.parse(req.url);</span><br><span class="line">        console.log(myUrl);</span><br><span class="line"></span><br><span class="line">        router.router(req, res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(&#39;8888&#39;)</span><br><span class="line">    console.log(&quot;Server is running at &quot; + &quot;http:&#x2F;&#x2F;localhost:8888&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.start &#x3D; start;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
